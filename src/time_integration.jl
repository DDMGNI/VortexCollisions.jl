
"""
Three-stage Runge-Kutta method of Zhao and Wei with parameter C=4
[Math. Meth. Appl. Sci. 2014, 37 1042‚Äì1071, figure 1b]
"""
@generated function timestep!(op::CollisionOperator{M,N,‚Ñ≥,ùí©,RT,CT}, u‚ÇÄ::Matrix{RT}, u‚ÇÅ::Matrix{RT}, Œît::RT) where {M,N,‚Ñ≥,ùí©,RT,CT}
    local u::Vector{Matrix{RT}} = [zeros(RT,M,N), zeros(RT,M,N), zeros(RT,M,N)]
    local f::Vector{Matrix{RT}} = [zeros(RT,M,N), zeros(RT,M,N), zeros(RT,M,N)]

    local a::Vector{RT} = [0.0, 0.5, 1.0]
    local b::Vector{RT} = [1/6, 2/3, 1/6]
    local c::Vector{RT} = [0.0, 0.5, 1.0]

    quote
        @assert size(u‚ÇÄ) == size(u‚ÇÅ) == (M,N)

        $u[1] .= u‚ÇÄ
        collision_operator!(op, $u[1], $f[1])

        update_field!($f[1], u‚ÇÄ, $u[2], Œît * $a[2])
        collision_operator!(op, $u[2], $f[2])

        update_field!($f[2], u‚ÇÄ, $u[3], Œît * $a[3])
        collision_operator!(op, $u[3], $f[3])

        update_field!($f[1], u‚ÇÄ, u‚ÇÅ, Œît * $b[1])
        update_field!($f[2], u‚ÇÅ, u‚ÇÅ, Œît * $b[2])
        update_field!($f[3], u‚ÇÅ, u‚ÇÅ, Œît * $b[3])

        u‚ÇÅ
    end
end


function update_field!(f::Matrix{RT}, u‚ÇÄ::Matrix{RT}, u‚ÇÅ::Matrix{RT}, fac::RT) where {RT}
    @assert size(f) == size(u‚ÇÄ) == size(u‚ÇÅ)
    @inbounds for j in 1:size(u‚ÇÅ,2)
        for i in 1:size(u‚ÇÅ,1)
            u‚ÇÅ[i,j] = u‚ÇÄ[i,j] + fac * f[i,j]
        end
    end
end
